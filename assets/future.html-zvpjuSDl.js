import{_ as e,o as a,c as o,e as t}from"./app-6WmjFGj_.js";const c={},n=t('<h1 id="展望未来" tabindex="-1"><a class="header-anchor" href="#展望未来" aria-hidden="true">#</a> 展望未来</h1><blockquote><p>未来是美好的，也是不确定的，让我们共同期待 <code>PanguText</code> 在未来的发展空间。</p></blockquote><h2 id="未来的计划" tabindex="-1"><a class="header-anchor" href="#未来的计划" aria-hidden="true">#</a> 未来的计划</h2><blockquote><p>这里收录了 <code>PanguText</code> 可能会在后期添加的功能。</p></blockquote><h3 id="spannablestring-的局限性" tabindex="-1"><a class="header-anchor" href="#spannablestring-的局限性" aria-hidden="true">#</a> SpannableString 的局限性</h3><p><code>PanguText</code> 目前在 Android 平台上的主要功能来自 <code>SpannableString</code>，目前尚未完全解决处理复杂的文本样式以及性能开销问题。</p><h3 id="jetpack-compose-计划" tabindex="-1"><a class="header-anchor" href="#jetpack-compose-计划" aria-hidden="true">#</a> Jetpack Compose 计划</h3><p><code>PanguText</code> 未来将会支持 Jetpack Compose，并计划采用 <code>AnnotatedString</code> 作为主要的文本处理方式以实现对底层的最小化侵入。</p>',8),d=[n];function r(i,s){return a(),o("div",null,d)}const p=e(c,[["render",r],["__file","future.html.vue"]]);export{p as default};
